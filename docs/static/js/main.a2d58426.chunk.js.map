{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GiffExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","nuevaCat","trim","prevList","find","element","for","type","name","placeholder","value","onChange","newCat","target","GifGridItem","title","url","className","loading","src","alt","getGifs","category","a","correct_cat","encodeURI","fetch","resp","json","data","gifsList","map","img","id","images","downsized_medium","console","dir","GifGrid","state","setState","useEffect","then","list","useFetchGifs","gifs","GiffExpertApp","props","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMA8CeA,EA3CK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAGnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OAAO,qCACH,+CACA,uBAAMC,SAfW,SAAAC,GACjBA,EAAEC,iBACF,IAAIC,EAAWL,EAAWM,OACtBD,GACAP,GAAc,SAAAS,GAAQ,OAChBA,EAASC,MAAK,SAAAC,GAAO,OAAIA,IAAYJ,KAEnCE,EAFJ,CACKP,GADL,mBACoBO,QAS5B,UACI,uBAAOG,IAAI,OAAX,wBACA,uBACIC,KAAK,OACLC,KAAK,WACLC,YAAY,WACZC,MAAOd,EACPe,SA5Bc,SAACZ,GACvB,IAAMa,EAASb,EAAEc,OAAOH,MACxBb,EAAce,a,QCPTE,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEjC,OACI,sBAAKC,UAAU,8DAAf,UACI,qBAAKC,QAAQ,OAAOC,IAAKH,EAAKI,IAAKL,IACnC,4BAAIA,Q,uBCcDM,EArBF,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,sEAEFC,EAAcC,UAAUH,GACxBN,EAHE,iDAG8CQ,EAH9C,8DAIWE,MAAMV,GAJjB,cAIFW,EAJE,gBAKeA,EAAKC,OALpB,uBAKAC,EALA,EAKAA,KAEFC,EAAWD,EAAKE,KAAI,SAAAC,GACtB,IAAQC,EAAsBD,EAAtBC,GAAIlB,EAAkBiB,EAAlBjB,MAAOmB,EAAWF,EAAXE,OAEnB,MAAO,CAAED,KAAIlB,QAAOC,IAAG,OAAEkB,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBnB,QAV9C,kBAYDc,GAZC,yCAgBRM,QAAQC,IAAR,MAhBQ,kBAiBD,IAjBC,0DAAH,sDC2BEC,EArBC,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SAEf,ECLwB,SAACA,GACzB,MAA0B3B,mBAAS,CAC/BkC,KAAM,GACNX,SAAS,IAFb,mBAAOqB,EAAP,KAAcC,EAAd,KAiBA,OAbAC,qBAAU,WACNpB,EAAQC,GACHoB,MAAK,SAAAC,GACFH,EACI,CACIX,KAAMc,EACNzB,SAAS,SAK1B,CAACI,IAEGiB,EDbyBK,CAAatB,GAA/BuB,EAAd,EAAQhB,KAAYX,EAApB,EAAoBA,QAEpB,OAAO,qCAEH,oBAAID,UAAU,mCAAd,SAAkDK,IACjDJ,GAAW,mBAAGD,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEQ4B,EAAKd,KAAI,SAACC,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEkBzCa,EA9BO,SAAAC,GAGlB,MAAoCpD,mBAAS,CAAC,kBAA9C,mBAAOqD,EAAP,KAAmBtD,EAAnB,KAEA,OAAO,eAAC,WAAD,WACH,+CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEQsD,EAAWjB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CACIA,SAAUA,GACLA,Y,MCd7B2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a2d58426.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const handleInputChange = (e) => {\r\n        const newCat = e.target.value\r\n        setInputValue(newCat)\r\n\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        let nuevaCat = inputValue.trim()\r\n        if (nuevaCat) {\r\n            setCategories(prevList =>\r\n                (!prevList.find(element => element === nuevaCat)) ?\r\n                    [inputValue, ...prevList] :\r\n                    prevList)\r\n\r\n        }\r\n    }\r\n\r\n\r\n    return <>\r\n        <h2> Add Category</h2>\r\n        <form onSubmit={handleSubmit}>\r\n            <label for=\"name\">Category: </label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"category\"\r\n                placeholder=\"Category\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}></input>\r\n        </form>\r\n    </>\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInLeftBig animate__fast'>\r\n            <img loading='lazy' src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","const getGifs = async (category) => {\r\n    try {\r\n        const correct_cat = encodeURI(category)\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${correct_cat}&limit=5&api_key=Xci2BqhB3LBFHXy1LzbsMY9eWJHsZzUy`\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json()\r\n\r\n        const gifsList = data.map(img => {\r\n            const { id, title, images } = img\r\n\r\n            return { id, title, url: images?.downsized_medium.url }\r\n        })\r\n        return gifsList\r\n\r\n    }\r\n    catch (err) {\r\n        console.dir(err)\r\n        return []\r\n    }\r\n}\r\n\r\nexport default getGifs","\r\nimport PropTypes from 'prop-types'\r\nimport { GifGridItem } from './GifGridItem'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import getGifs from '../helpers/getGifs'\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: gifs, loading } = useFetchGifs(category);\r\n\r\n    return <>\r\n\r\n        <h3 className='animate__animated animate__flash'>{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n        <div className=\"card-grid\">\r\n            {\r\n                gifs.map((img) => <GifGridItem key={img.id} {...img} />)\r\n            }\r\n        </div>\r\n    </>\r\n}\r\n\r\n\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\nexport default GifGrid","import { useEffect, useState } from 'react'\r\nimport getGifs from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(list => {\r\n                setState(\r\n                    {\r\n                        data: list,\r\n                        loading: false\r\n                    }\r\n                )\r\n\r\n            })\r\n    }, [category])\r\n\r\n    return state\r\n\r\n}\r\n","import React, { Fragment, useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nconst GiffExpertApp = props => {\r\n\r\n\r\n    const [categories, setCategories] = useState(['One Punch Man'])\r\n\r\n    return <Fragment>\r\n        <h2>GiffExpertApp</h2>\r\n        <hr />\r\n\r\n        <AddCategory setCategories={setCategories} />\r\n\r\n        <ol>\r\n            {\r\n                categories.map(category =>\r\n                    <GifGrid\r\n                        category={category}\r\n                        key={category}\r\n                    />\r\n                )\r\n            }\r\n        </ol>\r\n    </Fragment>\r\n\r\n\r\n}\r\n\r\nGiffExpertApp.propTypes = {\r\n\r\n}\r\n\r\nexport default GiffExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiffExpertApp from './GiffExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GiffExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}